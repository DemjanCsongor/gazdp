# Csongor Demján
# Gazdasági és pénzügyi modellek vizsga 2023.06.14.

x="sz7mgg";#neptun kód
z=charToRaw(iconv(x, "latin1", "UTF-8"))
for (i in 1:6) v=paste("0x",z,sep="")
e=strtoi(v)
ax=e[1];ay=e[2];az=e[3];av=e[4];ss=sum(strtoi(v))+24
cat("ax=",ax,"\n")
cat("ay=",ay,"\n")
cat("az=",az,"\n")
cat("av=",av,"\n")
cat("ss=",ss,"\n")
ar=c( "FB","AAPL","AMZN","GOOG","NFLX","TSLA")
ai=ss-6*floor(ss/6)
ev=2020-(ss-10*floor(ss/10))
cat("ev=",ev,"\n")
cat("reszveny=",ar[ai+1],"\n")

# 1. Kétdimenziós mintarealizáció
set.seed(ss)
nx=700
v=matrix(c(ax,abs(ax-ay),abs(ax-ay),ay),2)
w=chol(v)
z1=sqrt(-2*log(runif(nx)))*sin(runif(nx)*2*pi)
z2=sqrt(-2*log(runif(nx)))*cos(runif(nx)*2*pi)
zm=matrix(c(z1,z2),ncol=2)
zn=5*zm%*%w

# A sinus cosinusos általában meg lesz adva. Ha nincs megadva hogy kell létrehozni a kétdimenziós mintát, akkor:
# ( Ez egy 900 elemű minta )
set.seed(ss)
nx=900
v=matrix(c(ax,abs(ax-az),abs(ax-az),az),2)
w=chol(v)
z1=rnorm(nx)
z2=rnorm(nx)
zm=matrix(c(z1,z2),ncol=2)
zn=zm%*%w

#2. Ferdeség, lapultság, statisztikai elemzés, a realizáció megjelenítése, eloszlásvizsgálat, peremfüggetlenség, perspektivikus ábrázolás
install.packages("moments") #moments package letöltése
library("moments") #library betöltése

# ferdeség
skewness(zn)

# lapultság
kurtosis(zn)

#statisztikai elemzés
summary(zn)

#a realizáció megjelenítése
plot(zn, main="Ketdimenzios mintarealizacio")

#Eloszlásvizsgálat: Vizuális igazolás beépített fügvénnyel
#Sűrűségdiagrammal: Ez fogja bizonyítani, hogy Poisson, vagy normális eloszlás
install.packages("ggpubr")
library("ggpubr")
ggdensity(zn[,1],
          main = "Sűrűségdiagram",
          xlab = "Érték")
ggdensity(zn[,2],
          main = "Sűrűségdiagram",
          xlab = "Érték")
#vizsgálat kvantilis diagram alapján
install.packages("car")
library("car")
qqPlot(zn)


#Peremfüggetlenség vizsgálata khiˇ2 próbával
chisq.test(abs(zn))

#Perspektivikus ábrázolás, szintvonalak ábrázolása
persp(zn, col="lightblue", shade=0.6, main="Perspektivikus abrazolas") #perspektivikus
contour(zn) #szintvonalak
pairs(zn)  #A szórásdiagramok mátrixát állítjuk elő.
hist(zn) #hisztogram

# 3.a) Brown folyamat
gbm_ciklus <- function(nsim = 100, t = 500, mu = ax, sigma = (ax+az)/(ax+ay+az), S0 = 100, dt = 1./365) {
  gbm <- matrix(ncol = nsim, nrow = t)
  for (simu in 1:nsim) {
    gbm[1, simu] <- S0
    for (day in 2:t) {
      epsilon <- rnorm(1)
      dt = 1 / 365
      gbm[day, simu] <- gbm[(day-1), simu] * exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
    }
  }
  return(gbm)
}
#értékek beállítása, vizsgálat
nsim <- 50
t <- 500
mu <- ax
sigma <- (ax+az)/(ax+ay+az)
S0 <- 100
set.seed(ss+37)
gbm <- gbm_ciklus(nsim, t, mu, sigma, S0)
summary(gbm)
#ábrázolás
brown <- function(){
  set.seed(ss+37)
  x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
  for(i in 1:500){
    x <- rnorm(1, ax, (ax+az)/(ax+ay+az))
    y <- rnorm(1, ax, (ax+az)/(ax+ay+az))
    x.new <- c(x.new, x)
    y.new <- c(y.new, y)
    x.new.p <- cumsum(x.new)
    y.new.p <- cumsum(y.new)
    plot(x.new.p, y.new.p, type="b", main=paste("Brown folyamat\nIdo =", i,sep=""),
         xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
  }
}
brown()


# 3.b) Poisson folyamat
poisson <- function(){
  set.seed(ss+17)
  x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
  for(i in 1:1000){
    x <- rpois(1, (ax+az)/(ax+ay+az))
    y <- rpois(1, (ax+az)/(ax+ay+az))
    x.new <- c(x.new, x)
    y.new <- c(y.new, y)
    x.new.p <- cumsum(x.new)
    y.new.p <- cumsum(y.new)
    plot(x.new.p, y.new.p, type="b", main=paste("Poisson folyamat\nIdo =", i,sep=""),
    xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
  }
  poisson_g <- matrix(c(x.new.p,y.new.p), ncol = 2)
  return(poisson_g)
}

poisson_generalt <- poisson()
summary(poisson_generalt)

# 3.c) Stabilis eloszlású mintarealizáció
install.packages("stabledist")
library("stabledist")
alpha=1+ax/(ax+av)
stabilis <- rstable(1200, alpha=alpha, beta = 0, gamma = ay, delta = 0,0);stabilis
filtered = stabilis[stabilis>-1000 & stabilis<1000];filtered
hist(filtered, main="generált cauchy eloszláss", freq=F) #a piros a tényleges
plot(density(stabilis))

points(x=sd(stabilis), y = sd(stabilis),col="blue",pch=16)
#statisztikai adatok beépítettel
summary(stabilis)


varhato = mean(stabilis);varhato
szoras = sd(stabilis);szoras
median = median(stabilis);median

#modus
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}
Mode(stabilis)

# 4-5. Reszveny adatai
# https://finance.yahoo.com/quote/nflx/history?p=nflx

details<-read.csv("D:/NFLX.csv")
zaro <- details$Close
zaro
logreturn=c()
for(i in 1:length(zaro)-1){
logreturn[i] = abs(log(zaro[i+1]/zaro[i]))
}
#ábrák
chisq.test(logreturn)
hist(logreturn, main="Záró árak változása")
plot(logreturn)


# 3.c) Stabilis eloszlású mintarealizáció
install.packages("stabledist")
library("stabledist")
alpha=1+ax/(ax+av)
stabilis <- rstable(1200, alpha=alpha, beta = 0, gamma = ay, delta = 0,0);stabilis
filtered = stabilis[stabilis>-1000 & stabilis<1000];filtered
hist(filtered, main="generált cauchy eloszláss", freq=F) #a piros a tényleges
plot(density(stabilis))

points(x=sd(stabilis), y = sd(stabilis),col="blue",pch=16)
#statisztikai adatok beépítettel
summary(stabilis)


varhato = mean(stabilis);varhato
szoras = sd(stabilis);szoras
median = median(stabilis);median

#modus
Mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}
Mode(stabilis)


#Sebak Petra
#Gazdasági és pénzügyi modellek vizsga 2022.05.05

x="sz7mgg";#neptun kód
z=charToRaw(iconv(x, "latin1", "UTF-8"))
for (i in 1:6) v=paste("0x",z,sep="")
e=strtoi(v)
ax=e[1];ay=e[2];az=e[3];av=e[4];ss=sum(strtoi(v))+24
cat("ax=",ax,"\n")
cat("ay=",ay,"\n")
cat("az=",az,"\n")
cat("av=",av,"\n")
cat("ss=",ss,"\n")
ar=c( "FB","AAPL","AMZN","GOOG","NFLX","TSLA")
ai=ss-6*floor(ss/6)
ev=2020-(ss-10*floor(ss/10))
cat("ev=",ev,"\n")
cat("reszveny=",ar[ai+1],"\n")

#1. feladat
set.seed(ss)
	nx=1000
	v=matrix(c(ax,abs(ax-az),abs(ax-az),az),2)
	w=chol(v)
	z1=rexp(nx)
	z2=rexp(nx)
	zm=matrix(c(z1,z2),ncol=2)
	zn=zm%*%w

library(moments)

summary(zn) #statisztikai adatok 
skewness(zn) #ferdeség
kurtosis(zn) #lapultság

#milyen eloszlás?
 
#vizsgálat az 1. oszlopra
library("ggpubr")
ggdensity(zn[,1], 
          main = "Sűrűségdiagram",
          xlab = "Értékek")
#vizsgálat a 2. oszlopra
ggdensity(zn[,2], 
          main = "Sűrűségdiagram",
          xlab = "Értékek")
 
#vizsgálat a kvantilis alapjan
library("car")
qqPlot(zn)

#POISSON ELOSZLÁS

#2. feladat

gbm_ciklus <- function(nsim = 100, t = 100, mu = ax, sigma = (ax+az)/(ax+ay+az), S0 = 100, dt = 1./365) {
  gbm <- matrix(ncol = nsim, nrow = t)
  for (simu in 1:nsim) {
    gbm[1, simu] <- S0
    for (day in 2:t) {
      epsilon <- rnorm(1)
      dt = 1 / 365
      gbm[day, simu] <- gbm[(day-1), simu] * exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
    }
  }
  return(gbm)
}
 
nsim <- 50
t <- 100
mu <- ax
sigma <- (ax+az)/(ax+ay+az)
S0 <- 100
set.seed(ss+37)
gbm <- gbm_ciklus(nsim, t, mu, sigma, S0)
summary(gbm)

#brown abrazolas

brown <- function(){
	set.seed(ss+37)
	x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
	for(i in 1:100){
		x <- rnorm(1, ax, (ax+az)/(ax+ay+az))
		y <- rnorm(1, ax, (ax+az)/(ax+ay+az))
    		x.new <- c(x.new, x)
    		y.new <- c(y.new, y)
		x.new.p <- cumsum(x.new)
		y.new.p <- cumsum(y.new)
		plot(x.new.p, y.new.p, type="b", main=paste("Brown folyamat\nIdo =", i,sep=""),
		xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
    }
}

brown()

#3. feladat

poisson <- function(){
	set.seed(ss+17)
	x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
	for(i in 1:500){
		x <- rpois(1, (ax+az)/(ax+ay+az))
		y <- rpois(1, (ax+az)/(ax+ay+az))
    		x.new <- c(x.new, x)
    		y.new <- c(y.new, y)
		x.new.p <- cumsum(x.new)
		y.new.p <- cumsum(y.new)
		plot(x.new.p, y.new.p, type="b", main=paste("Poisson folyamat\nIdo =", i,sep=""),
		xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
	}
    		poisson_g <- matrix(c(x.new.p,y.new.p), ncol = 2)
		return(poisson_g)
}

poisson_generalt <- poisson()
summary(poisson_generalt)

#4-5. feladat

details<-read.csv("C:/Users/Diak/Documents/Gazdasagi_es_penzugyi_modellek_vizsga/AMZN.csv")
zaro=details$Close
zaro
logreturn=c()
for(i in 1:length(zaro)-1){
  logreturn[i]=abs(log(zaro[i+1]/zaro[i]))
}
chisq.test(logreturn)
#ábrák
hist(logreturn,main="záró árak változása, hisztogram")
plot(logreturn)


#0
x="sz7mgg";#neptun kód
z=charToRaw(iconv(x, "latin1", "UTF-8"))
for (i in 1:6) v=paste("0x",z,sep="")
e=strtoi(v)
ax=e[1];ay=e[2];az=e[3];av=e[4];ss=sum(strtoi(v))+24
cat("ax=",ax,"\n")
cat("ay=",ay,"\n")
cat("az=",az,"\n")
cat("av=",av,"\n")
cat("ss=",ss,"\n")
ar=c( "FB","AAPL","AMZN","GOOG","NFLX","TSLA")
ai=ss-6*floor(ss/6)
ev=2020-(ss-10*floor(ss/10))
cat("ev=",ev,"\n")
cat("reszveny=",ar[ai+1],"\n")

#1 kétdimenziós mintarealizáció
install.packages("moments")
library("moments")
set.seed(ss)
nx=700
v=matrix(c(ax,abs(ax-ay),abs(ax-ay),ay),2)
w=chol(v)
z1=sqrt(-2*log(runif(nx)))*sin(runif(nx)*2*pi)
z2=sqrt(-2*log(runif(nx)))*cos(runif(nx)*2*pi)
zm=matrix(c(z1,z2),ncol=2)
zn=5*zm%*%w
summary(zn)
skewness(zn)
kurtosis(zn)
#Min = minimum érték
#Max = maximum érték
#1st Qu. = Első kvartilis, megfigyelések 25%-a ennél a mennyiségnél alacsonyabb
#Median = medián
#Mean = átlag
#3rd Qu. = Harmadik kvartilis, megfigyelések 25%-a ennél a mennyiségnél alacsonyabb
#kurtosis() = lapultság vizsgálat
#skewness() = ferdeség vizsgálat
#eloszlásvizsgálat: vizuális igazolás beépített függvényekkel
#sűrűségdiagrammal: a haranggörbe bizonyítja a normalitást
install.packages("ggpubr")
library("ggpubr")
ggdensity(zn[,1],
          main = "Sűrűségdiagram",
          xlab = "Érték")
ggdensity(zn[,2],
          main = "Sűrűségdiagram",
          xlab = "Érték")
#vizsgálat kvantilis diagram alapján
install.packages("car")
library("car")
qqPlot(zn)
#perem függetlenség vizsgálat khi-négyzet próbával
chisq.test(abs(zn))
#2 perspektivikus ábrázolás
persp(zn,col="lightblue",shade=0.6,main="Perspektivikus ábrázolás")
pairs(zn)
hist(zn)
#3 Brown folyamat
gbm_ciklus <- function(nsim = 100, t = 500, mu = ax, sigma = (ax+az)/(ax+ay+az), S0 = 100, dt = 1./365) {
  gbm <- matrix(ncol = nsim, nrow = t)
  for (simu in 1:nsim) {
    gbm[1, simu] <- S0
    for (day in 2:t) {
      epsilon <- rnorm(1)
      dt = 1 / 365
      gbm[day, simu] <- gbm[(day-1), simu] * exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
    }
  }
  return(gbm)
}
#értékek beállítása, vizsgálat
nsim <- 50
t <- 500
mu <- ax
sigma <- (ax+az)/(ax+ay+az)
S0 <- 100
set.seed(ss+37)
gbm <- gbm_ciklus(nsim, t, mu, sigma, S0)
summary(gbm)
#ábrázolás
brown <- function(){
  set.seed(ss+37)
  x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
  for(i in 1:500){
    x <- rnorm(1, ax, (ax+az)/(ax+ay+az))
    y <- rnorm(1, ax, (ax+az)/(ax+ay+az))
    x.new <- c(x.new, x)
    y.new <- c(y.new, y)
    x.new.p <- cumsum(x.new)
    y.new.p <- cumsum(y.new)
    plot(x.new.p, y.new.p, type="b", main=paste("Brown folyamat\nIdo =", i,sep=""),
         xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
  }
}
brown()

#4 Poisson folyamat
poisson <- function(){
  set.seed(ss+17)
  x <- y <- x.new <- y.new <- x.new.p <- y.new.p <- vector()
  for(i in 1:1000){
    x <- rpois(1, (ax+az)/(ax+ay+az))
    y <- rpois(1, (ax+az)/(ax+ay+az))
    x.new <- c(x.new, x)
    y.new <- c(y.new, y)
    x.new.p <- cumsum(x.new)
    y.new.p <- cumsum(y.new)
    plot(x.new.p, y.new.p, type="b", main=paste("Poisson folyamat\nIdo =", i,sep=""),
    xlab="x koordinatak", ylab="y koordinatak", col=c(rep("gray", i-1), "red"), pch=c(rep(20,i-1),1))
  }
  poisson_g <- matrix(c(x.new.p,y.new.p), ncol = 2)
  return(poisson_g)
}

poisson_generalt <- poisson()
summary(poisson_generalt)

#4-5 reszveny adatai
#https://finance.yahoo.com/quote/amzn/history?p=amzn
details <- read.csv("D:/AMZN.csv")
zaro = details$Close
zaro
logreturn=c()
for(i in 1:length(zaro)-1){
  logreturn[i] = abs(log(zaro[i+1]/zaro[i]))
}
#ábrák
chisq.test(logreturn)
hist(logreturn, main = "záró árak változása, hisztogram")
plot(logreturn)

#u_statisztika
x = rnorm(100)

atlag = function(x) {
  s = 0;
  for (i in 1:length(x)) {
    s = s + x[i]
  };
  return(s / length(x))
}

ustat = function(x, m, w) {
  u = (atlag(x) - m) / (w / sqrt(length(x)));
  if (abs(u) < 1.96) {
    return("elfogadjuk")
  } else {
    return("elutasítjuk")
  }
}

print(ustat(x, 4, 1))

#u_stat_mintaatlag
# x = rnorm(70, 5, 1) #elutasítjuk
# x = rnorm(170, 6, 1) #elutasítjuk
# x = rnorm(70, 2.1, 1) #elfogadjuk
# x = rnorm(10, 2, 1) #elfogadjuk
x = rnorm(170, 2, 1) #elfogadjuk
y = rnorm(100, 2, 1)

mintaatlag = function(x) {
  s = 0;
  for (i in 1:length(x)) {
    s = s + x[i]
  };
  return(s / length(x))
}

print(mintaatlag(x))


u = function(x, y, v, w) {
  u = (mintaatlag(x) - mintaatlag(y)) / (sqrt((v ^ 2 / length(x)) + (w ^ 2 / length(y))));
  if (abs(u) < 1.96) {
    return("elfogadjuk")
  } else {
    return("elutasítjuk")
  }
}

print(u(x, y, 1, 1))

#integralassal egyenletes eloszlas
# Egyenletes eloszlás generálása (x,y pont párok):
x = runif(100)
y = runif(100)

f=function(x){
    x^2
}

int=function(x,y,f) {
    s=0;
    for (i in 1:length(x)) {
       if(f(x[i])>y[i]){
           s=s+1
       }
    };
    return(s/length(x))
}

print(int(x,y,f))

#integralas szamito
# Egyenletes eloszlás generálása (x,y pont párok):
x = runif(10)
y = runif(10)

f=function(x){
    x^2
}

int=function(x,y,f) {
    s=0;
    for (i in 1:10) {
       if(f(x[i])>y[i]){
           s=s+1
       }
    };
    return(s/10)
}

print(int(x,y,f))

#e mintas u proba t eloszlassal
x = rnorm(10, 5, 1) #elutasítjuk
x = rnorm(10, 2, 1) #elfogadjuk
x = rnorm(10, 2.1, 1) #elfogadjuk

mintaatlag = function(x) {
  s = 0;
  for (i in 1:length(x)) {
    s = s + x[i]
  };
  return(s / length(x))
}

# t_próbafüggvény = (sokasági átlag - mintaátlag)/(mintabeli_szórás/sqrt(n))
t = function(x, m) {
  t = (mintaatlag(x) - m) / (s(x) / sqrt(length(x)));
  if (abs(t) < 2.2622) {
    return("elfogadjuk")
  } else {
    return("elutasítjuk")
  }
}

print(t(x, 2))

#max exp
# exponential distribution
a = rexp(1000, 2);
maxexp = function(x) {
  s = 0;
  for (j in 1:length(x)) {
    s = s + x[j]
  };
  return(1 / (s / length(x)))
}
print(maxexp(a));


#maxPoisson
maxPoisson = function(x) {
    s=x[i];
    for (i in 2:length(x)) {
       s=s+x[i]
    };
    return(s/length(x))
}
z=c(1,2,3)

maxPoisson(z)

#korrigalt empirikus szorasnegyzet
x=rnorm(10);
y=rnorm(10);
z=c(1,2,3)

empk=function(x) {
    s=x[1];
    for (i in 2:length(x)) {
       s=s+x[i]
    };
    return(s/length(x))
}

s = function(x) {
    s=(x[1]-empk(x))^2;
    for(i in 2:length(x)){
        s=s+(x[i]-empk(x))^2
    };
    return(s/(length(x)-1))
}

print(s(z))
print(s(x))
print(s(y))

#mm
x = rnorm(100);
y = rnorm(100);
empk = function(x) {
  s = x[1];
  for (i in 2:length(x)) {
    s = s + x[i]
  };
  return(s / length(x))
}

# kovariancia
mm = function(x, y) {
  s = (x[1] - empk(x)) * (y[1] - empk(y));
  for (i in 2:length(x)) {
    s = s + (x[i] - empk(x)) * (y[i] - empk(y))
  };
  return(s / (length(x) - 1))
}

# empirikus szórásnégyzet
s = function(x) {
  s = (x[1] - empk(x)) ^ 2;
  for (i in 2:length(x)) {
    s = s + (x[i] - empk(x)) ^ 2
  };
  return(s / (length(x) - 1))
}

print(mm(x, y))

# Pearson féle korrelációs együttható(Lineáris regresszó)
rrrr = function(x, y) {
  mm(x, y) / (sqrt(s(x)) * sqrt(s(y)))
}

a = function(x, y) {
  rrrr(x, y) / s(x)
}

b = function(x, y) {
  empk(y) - empk(x) * (mm(x, y) / s(x))
}

print(a(x, y))
print(b(x, y))